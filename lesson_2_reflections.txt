What happens when you initialize a repository? Why do you need to do it?

     A .git subdir is created. This will hold info pertaining to the repository
     and will hold the history (commits).
     
How is the staging area different from the working directory and the repository?
What value do you think it offers?

     Staging contains the changes you are assembling into a logical commit. It
     differs from the repository in that it is ephemeral. Nothing is yet committed
     or saved to the repository. It differs from the working directory in that
     any files in staging are going to be affected by a 'git commit' and their
     changes will be placed in the repository.

     Its value is that it allows you to assemble a logical commit - adding and removing
     changes until you are satisfied with the correctness of the commit.

How can you use the staging area to make sure you have one commit per logical
change?

     Use git diff and git diff --staging. First compares working area, second compares
     staging to commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

   - Different features
   - Bug fix branches
   - Different people working on code base
   - new features
   - Removing old code
   - process
   

How do the diagrams help you visualize the branch structure?

    - You can see the history and where branches diverged from each other.
    
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
